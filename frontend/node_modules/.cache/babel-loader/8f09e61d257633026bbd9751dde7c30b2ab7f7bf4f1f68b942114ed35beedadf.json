{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phanb\\\\OneDrive\\\\Desktop\\\\Scholar-Chat\\\\frontend\\\\src\\\\components\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ChatState } from '../Context/ChatProvider';\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport { getSender, getSenderFull } from '../config/ChatLogic';\nimport ProfileModal from \"../components/misc/ProfileModal\";\nimport UpdateGroupChatModal from './misc/UpdateGroupChatModal';\nimport axios from 'axios';\nimport './styles.css';\nimport ScrollableChat from './ScrollableChat';\nimport io from 'socket.io-client';\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = process.env.NODE_ENV === 'production' ? process.env.ENDPOINT : process.env.DEV_ENV;\nvar socket, selectedChatCompare;\nconst SingleChat = _ref => {\n  _s();\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const {\n    user,\n    selectedChat,\n    setSelectedChat,\n    notification,\n    setNotification\n  } = ChatState();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit('stop typing', selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit('setup', user);\n    socket.on('connected', () => setSocketConnected(true));\n    socket.on('typing', () => setIsTyping(true));\n    socket.on('stop typing', () => setIsTyping(false));\n  }, []);\n  const typingHandler = event => {\n    setNewMessage(event.target.value);\n    if (!socketConnected) {\n      return;\n    }\n    if (!typing) {\n      setTyping(true);\n      socket.emit('typing', selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var TimeDiff = timeNow - lastTypingTime;\n      if (TimeDiff >= timerLength) {\n        socket.emit('stop typing', selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  // console.log(notification,\"---------------------\");\n\n  useEffect(() => {\n    socket.on('message recieved', newMessageRecieved => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n\n          // This is done so that latest states are build\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 35\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain,\n            fetchMessages: fetchMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          isRequired: true,\n          mt: 3,\n          children: [isTyping ? /*#__PURE__*/_jsxDEV(BeatLoader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 39\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"RsVs1xIS6sLsKaxnQ+2KwVzUNoQ=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useEffect","useState","ChatState","Box","FormControl","IconButton","Input","Spinner","Text","useToast","ArrowBackIcon","getSender","getSenderFull","ProfileModal","UpdateGroupChatModal","axios","ScrollableChat","io","BeatLoader","ENDPOINT","process","env","NODE_ENV","DEV_ENV","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","user","selectedChat","setSelectedChat","notification","setNotification","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","toast","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","title","description","status","duration","isClosable","position","sendMessage","event","key","post","content","chatId","on","typingHandler","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","TimeDiff","newMessageRecieved","chat","includes","base","md","isGroupChat","users","chatName","toUpperCase"],"sources":["C:/Users/phanb/OneDrive/Desktop/Scholar-Chat/frontend/src/components/SingleChat.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { ChatState } from '../Context/ChatProvider'\r\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react'\r\nimport { ArrowBackIcon } from '@chakra-ui/icons'\r\nimport { getSender, getSenderFull } from '../config/ChatLogic'\r\nimport ProfileModal from \"../components/misc/ProfileModal\"\r\nimport UpdateGroupChatModal from './misc/UpdateGroupChatModal'\r\nimport axios from 'axios'\r\nimport './styles.css'\r\nimport ScrollableChat from './ScrollableChat'\r\nimport io from 'socket.io-client'\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\n\r\n\r\nconst ENDPOINT =  process.env.NODE_ENV==='production'?process.env.ENDPOINT:process.env.DEV_ENV;\r\nvar socket,selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const { user, selectedChat, setSelectedChat,notification,setNotification } = ChatState();\r\n    const [socketConnected,setSocketConnected] = useState(false);\r\n    const [typing,setTyping] = useState(false);\r\n    const [isTyping,setIsTyping] = useState(false);\r\n    const toast = useToast();\r\n\r\n    const fetchMessages = async () => {\r\n        if (!selectedChat) return;\r\n\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${user.token}`,\r\n                },\r\n            };\r\n\r\n            setLoading(true);\r\n\r\n            const { data } = await axios.get(\r\n                `/api/message/${selectedChat._id}`,\r\n                config\r\n            );\r\n            setMessages(data);\r\n            setLoading(false);\r\n\r\n            socket.emit(\"join chat\", selectedChat._id);\r\n        } catch (error) {\r\n            toast({\r\n                title: \"Error Occured!\",\r\n                description: \"Failed to Load the Messages\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            });\r\n        }\r\n    };\r\n\r\n    const sendMessage = async (event) => {\r\n        if (event.key === \"Enter\" && newMessage) {\r\n            socket.emit('stop typing',selectedChat._id);\r\n            try {\r\n                const config = {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                        Authorization: `Bearer ${user.token}`,\r\n                    },\r\n                };\r\n                setNewMessage(\"\");\r\n                const { data } = await axios.post(\r\n                    \"/api/message\",\r\n                    {\r\n                        content: newMessage,\r\n                        chatId: selectedChat,\r\n                    },\r\n                    config\r\n                );\r\n                socket.emit(\"new message\", data);\r\n                setMessages([...messages, data]);\r\n            } catch (error) {\r\n                toast({\r\n                    title: \"Error Occured!\",\r\n                    description: \"Failed to send the Message\",\r\n                    status: \"error\",\r\n                    duration: 5000,\r\n                    isClosable: true,\r\n                    position: \"bottom\",\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        socket = io(ENDPOINT);\r\n        socket.emit('setup',user);\r\n        socket.on('connected',()=>setSocketConnected(true));\r\n        socket.on('typing',()=>setIsTyping(true));\r\n        socket.on('stop typing',()=>setIsTyping(false));\r\n    }, [])\r\n    \r\n\r\n    const typingHandler = (event) => {\r\n        setNewMessage(event.target.value);\r\n\r\n        if(!socketConnected){\r\n            return;\r\n        }\r\n\r\n        if(!typing){\r\n            setTyping(true);\r\n            socket.emit('typing',selectedChat._id);\r\n        }\r\n\r\n        let lastTypingTime = new Date().getTime();\r\n        var timerLength = 3000;\r\n\r\n        setTimeout(() => {\r\n            var timeNow = new Date().getTime();\r\n            var TimeDiff = timeNow - lastTypingTime;\r\n\r\n            if(TimeDiff>=timerLength){\r\n                socket.emit('stop typing',selectedChat._id);\r\n                setTyping(false);\r\n            }\r\n        }, timerLength);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchMessages();\r\n        selectedChatCompare=selectedChat;\r\n    }, [selectedChat])\r\n\r\n    // console.log(notification,\"---------------------\");\r\n\r\n    useEffect(()=>{\r\n        socket.on('message recieved',(newMessageRecieved)=>{\r\n            if(!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id){\r\n                if(!notification.includes(newMessageRecieved)){\r\n                    setNotification([newMessageRecieved,...notification]);\r\n\r\n                    // This is done so that latest states are build\r\n                    setFetchAgain(!fetchAgain);\r\n                }\r\n            }\r\n            else{\r\n                setMessages([...messages,newMessageRecieved]);\r\n            }\r\n        })\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {selectedChat ? (\r\n                <>\r\n                    <Text\r\n                        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n                        pb={3}\r\n                        px={2}\r\n                        w=\"100%\"\r\n                        fontFamily=\"Work sans\"\r\n                        d=\"flex\"\r\n                        justifyContent={{ base: \"space-between\" }}\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <IconButton\r\n                            d={{ base: \"flex\", md: \"none\" }}\r\n                            icon={<ArrowBackIcon />}\r\n                            onClick={() => setSelectedChat(\"\")}\r\n                        />\r\n                        {!selectedChat.isGroupChat ? (\r\n                            <>\r\n                                {getSender(user, selectedChat.users)}\r\n                                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {selectedChat.chatName.toUpperCase()}\r\n                                <UpdateGroupChatModal fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} fetchMessages={fetchMessages}>\r\n                                </UpdateGroupChatModal>\r\n                            </>\r\n                        )}\r\n                    </Text>\r\n\r\n                    <Box\r\n                        d=\"flex\"\r\n                        flexDir=\"column\"\r\n                        justifyContent=\"flex-end\"\r\n                        p={3}\r\n                        bg=\"#E8E8E8\"\r\n                        w=\"100%\"\r\n                        h=\"100%\"\r\n                        borderRadius=\"lg\"\r\n                        overflowY=\"hidden\"\r\n                    >\r\n                        {loading ? (\r\n                            <Spinner\r\n                                size=\"xl\"\r\n                                w={20}\r\n                                h={20}\r\n                                alignSelf=\"center\"\r\n                                margin=\"auto\"\r\n                            />\r\n                        ) : (\r\n                            <div className=\"messages\">\r\n                                <ScrollableChat messages={messages} />\r\n                            </div>\r\n                        )}\r\n\r\n                        <FormControl onKeyDown={sendMessage} isRequired mt={3}>\r\n                            {isTyping?<BeatLoader/>:(<></>)}\r\n                            <Input variant=\"filled\"\r\n                                bg=\"#E0E0E0\"\r\n                                placeholder=\"Enter a message..\"\r\n                                value={newMessage}\r\n                                onChange={typingHandler}>\r\n                            </Input>\r\n                        </FormControl>\r\n                    </Box>\r\n                </>\r\n            ) : (\r\n                <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n                    <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n                        Click on a user to start chatting\r\n                    </Text>\r\n                </Box>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SingleChat"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}